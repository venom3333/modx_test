<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'edb4362935f0063252e072a15aba3f1d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormIt","description":"A dynamic form processing snippet.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormIt\\r\\n *\\r\\n * A dynamic form processing Snippet for MODx Revolution.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n$fi->initialize($modx->context->get(\'key\'));\\r\\n$fi->loadRequest();\\r\\n\\r\\n$fields = $fi->request->prepare();\\r\\nreturn $fi->request->handle($fields);","locked":0,"properties":"a:58:{s:5:\\"hooks\\";a:7:{s:4:\\"name\\";s:5:\\"hooks\\";s:4:\\"desc\\";s:22:\\"prop_formit.hooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"preHooks\\";a:7:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:25:\\"prop_formit.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"submitVar\\";a:7:{s:4:\\"name\\";s:9:\\"submitVar\\";s:4:\\"desc\\";s:26:\\"prop_formit.submitvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"validate\\";a:7:{s:4:\\"name\\";s:8:\\"validate\\";s:4:\\"desc\\";s:25:\\"prop_formit.validate_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"errTpl\\";a:7:{s:4:\\"name\\";s:6:\\"errTpl\\";s:4:\\"desc\\";s:23:\\"prop_formit.errtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:37:\\"<span class=\\"error\\">[[+error]]<\\/span>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:22:\\"validationErrorMessage\\";a:7:{s:4:\\"name\\";s:22:\\"validationErrorMessage\\";s:4:\\"desc\\";s:39:\\"prop_formit.validationerrormessage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:96:\\"<p class=\\"error\\">A form validation error occurred. Please check the values you have entered.<\\/p>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:22:\\"validationErrorBulkTpl\\";a:7:{s:4:\\"name\\";s:22:\\"validationErrorBulkTpl\\";s:4:\\"desc\\";s:39:\\"prop_formit.validationerrorbulktpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:19:\\"<li>[[+error]]<\\/li>\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:26:\\"trimValuesBeforeValidation\\";a:7:{s:4:\\"name\\";s:26:\\"trimValuesBeforeValidation\\";s:4:\\"desc\\";s:43:\\"prop_formit.trimvaluesdeforevalidation_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"customValidators\\";a:7:{s:4:\\"name\\";s:16:\\"customValidators\\";s:4:\\"desc\\";s:33:\\"prop_formit.customvalidators_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"clearFieldsOnSuccess\\";a:7:{s:4:\\"name\\";s:20:\\"clearFieldsOnSuccess\\";s:4:\\"desc\\";s:37:\\"prop_formit.clearfieldsonsuccess_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"successMessage\\";a:7:{s:4:\\"name\\";s:14:\\"successMessage\\";s:4:\\"desc\\";s:31:\\"prop_formit.successmessage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:25:\\"successMessagePlaceholder\\";a:7:{s:4:\\"name\\";s:25:\\"successMessagePlaceholder\\";s:4:\\"desc\\";s:42:\\"prop_formit.successmessageplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:17:\\"fi.successMessage\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"store\\";a:7:{s:4:\\"name\\";s:5:\\"store\\";s:4:\\"desc\\";s:22:\\"prop_formit.store_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"placeholderPrefix\\";a:7:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:34:\\"prop_formit.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"fi.\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"storeTime\\";a:7:{s:4:\\"name\\";s:9:\\"storeTime\\";s:4:\\"desc\\";s:26:\\"prop_formit.storetime_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"300\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"storeLocation\\";a:7:{s:4:\\"name\\";s:13:\\"storeLocation\\";s:4:\\"desc\\";s:30:\\"prop_formit.storelocation_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:5:\\"value\\";s:5:\\"cache\\";s:4:\\"text\\";s:16:\\"formit.opt_cache\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"session\\";s:4:\\"text\\";s:18:\\"formit.opt_session\\";}}s:5:\\"value\\";s:5:\\"cache\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"allowFiles\\";a:7:{s:4:\\"name\\";s:10:\\"allowFiles\\";s:4:\\"desc\\";s:27:\\"prop_formit.allowfiles_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"spamEmailFields\\";a:7:{s:4:\\"name\\";s:15:\\"spamEmailFields\\";s:4:\\"desc\\";s:32:\\"prop_formit.spamemailfields_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"spamCheckIp\\";a:7:{s:4:\\"name\\";s:11:\\"spamCheckIp\\";s:4:\\"desc\\";s:28:\\"prop_formit.spamcheckip_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"recaptchaJs\\";a:7:{s:4:\\"name\\";s:11:\\"recaptchaJs\\";s:4:\\"desc\\";s:28:\\"prop_formit.recaptchajs_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"{}\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"recaptchaTheme\\";a:7:{s:4:\\"name\\";s:14:\\"recaptchaTheme\\";s:4:\\"desc\\";s:31:\\"prop_formit.recaptchatheme_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:5:\\"value\\";s:3:\\"red\\";s:4:\\"text\\";s:14:\\"formit.opt_red\\";}i:1;a:2:{s:5:\\"value\\";s:5:\\"white\\";s:4:\\"text\\";s:16:\\"formit.opt_white\\";}i:2;a:2:{s:5:\\"value\\";s:5:\\"clean\\";s:4:\\"text\\";s:16:\\"formit.opt_clean\\";}i:3;a:2:{s:5:\\"value\\";s:10:\\"blackglass\\";s:4:\\"text\\";s:21:\\"formit.opt_blackglass\\";}}s:5:\\"value\\";s:5:\\"clean\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:27:\\"prop_formit.redirectto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"redirectParams\\";a:7:{s:4:\\"name\\";s:14:\\"redirectParams\\";s:4:\\"desc\\";s:31:\\"prop_formit.redirectparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"emailTo\\";a:7:{s:4:\\"name\\";s:7:\\"emailTo\\";s:4:\\"desc\\";s:24:\\"prop_formit.emailto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"emailToName\\";a:7:{s:4:\\"name\\";s:11:\\"emailToName\\";s:4:\\"desc\\";s:28:\\"prop_formit.emailtoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"emailFrom\\";a:7:{s:4:\\"name\\";s:9:\\"emailFrom\\";s:4:\\"desc\\";s:26:\\"prop_formit.emailfrom_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"emailFromName\\";a:7:{s:4:\\"name\\";s:13:\\"emailFromName\\";s:4:\\"desc\\";s:30:\\"prop_formit.emailfromname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailReplyTo\\";a:7:{s:4:\\"name\\";s:12:\\"emailReplyTo\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailreplyto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"emailReplyToName\\";a:7:{s:4:\\"name\\";s:16:\\"emailReplyToName\\";s:4:\\"desc\\";s:33:\\"prop_formit.emailreplytoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"emailCC\\";a:7:{s:4:\\"name\\";s:7:\\"emailCC\\";s:4:\\"desc\\";s:24:\\"prop_formit.emailcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"emailCCName\\";a:7:{s:4:\\"name\\";s:11:\\"emailCCName\\";s:4:\\"desc\\";s:28:\\"prop_formit.emailccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"emailBCC\\";a:7:{s:4:\\"name\\";s:8:\\"emailBCC\\";s:4:\\"desc\\";s:25:\\"prop_formit.emailbcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailBCCName\\";a:7:{s:4:\\"name\\";s:12:\\"emailBCCName\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailbccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"emailReturnPath\\";a:7:{s:4:\\"name\\";s:15:\\"emailReturnPath\\";s:4:\\"desc\\";s:32:\\"prop_formit.emailreturnpath_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"emailSubject\\";a:7:{s:4:\\"name\\";s:12:\\"emailSubject\\";s:4:\\"desc\\";s:29:\\"prop_formit.emailsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:23:\\"emailUseFieldForSubject\\";a:7:{s:4:\\"name\\";s:23:\\"emailUseFieldForSubject\\";s:4:\\"desc\\";s:40:\\"prop_formit.emailusefieldforsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"emailHtml\\";a:7:{s:4:\\"name\\";s:9:\\"emailHtml\\";s:4:\\"desc\\";s:26:\\"prop_formit.emailhtml_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"emailConvertNewlines\\";a:7:{s:4:\\"name\\";s:20:\\"emailConvertNewlines\\";s:4:\\"desc\\";s:37:\\"prop_formit.emailconvertnewlines_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"emailMultiWrapper\\";a:7:{s:4:\\"name\\";s:17:\\"emailMultiWrapper\\";s:4:\\"desc\\";s:34:\\"prop_formit.emailmultiwrapper_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:10:\\"[[+value]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:19:\\"emailMultiSeparator\\";a:7:{s:4:\\"name\\";s:19:\\"emailMultiSeparator\\";s:4:\\"desc\\";s:36:\\"prop_formit.emailmultiseparator_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fiarTpl\\";a:7:{s:4:\\"name\\";s:7:\\"fiarTpl\\";s:4:\\"desc\\";s:24:\\"prop_formit.fiartpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarToField\\";a:7:{s:4:\\"name\\";s:11:\\"fiarToField\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiartofield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarSubject\\";a:7:{s:4:\\"name\\";s:11:\\"fiarSubject\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:30:\\"[[++site_name]] Auto-Responder\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"fiarFrom\\";a:7:{s:4:\\"name\\";s:8:\\"fiarFrom\\";s:4:\\"desc\\";s:25:\\"prop_formit.fiarfrom_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"fiarFromName\\";a:7:{s:4:\\"name\\";s:12:\\"fiarFromName\\";s:4:\\"desc\\";s:29:\\"prop_formit.fiarfromname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarReplyTo\\";a:7:{s:4:\\"name\\";s:11:\\"fiarReplyTo\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarreplyto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"fiarReplyToName\\";a:7:{s:4:\\"name\\";s:15:\\"fiarReplyToName\\";s:4:\\"desc\\";s:32:\\"prop_formit.fiarreplytoname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"fiarCC\\";a:7:{s:4:\\"name\\";s:6:\\"fiarCC\\";s:4:\\"desc\\";s:23:\\"prop_formit.fiarcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"fiarCCName\\";a:7:{s:4:\\"name\\";s:10:\\"fiarCCName\\";s:4:\\"desc\\";s:25:\\"prop_fiar.fiarccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fiarBCC\\";a:7:{s:4:\\"name\\";s:7:\\"fiarBCC\\";s:4:\\"desc\\";s:24:\\"prop_formit.fiarbcc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"fiarBCCName\\";a:7:{s:4:\\"name\\";s:11:\\"fiarBCCName\\";s:4:\\"desc\\";s:28:\\"prop_formit.fiarbccname_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"fiarHtml\\";a:7:{s:4:\\"name\\";s:8:\\"fiarHtml\\";s:4:\\"desc\\";s:25:\\"prop_formit.fiarhtml_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathMinRange\\";a:7:{s:4:\\"name\\";s:12:\\"mathMinRange\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathminrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathMaxRange\\";a:7:{s:4:\\"name\\";s:12:\\"mathMaxRange\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathmaxrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"100\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"mathField\\";a:7:{s:4:\\"name\\";s:9:\\"mathField\\";s:4:\\"desc\\";s:26:\\"prop_formit.mathfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"math\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathOp1Field\\";a:7:{s:4:\\"name\\";s:12:\\"mathOp1Field\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathop1field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op1\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"mathOp2Field\\";a:7:{s:4:\\"name\\";s:12:\\"mathOp2Field\\";s:4:\\"desc\\";s:29:\\"prop_formit.mathop2field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op2\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"mathOperatorField\\";a:7:{s:4:\\"name\\";s:17:\\"mathOperatorField\\";s:4:\\"desc\\";s:34:\\"prop_formit.mathoperatorfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"operator\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormIt\\r\\n *\\r\\n * A dynamic form processing Snippet for MODx Revolution.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n$fi->initialize($modx->context->get(\'key\'));\\r\\n$fi->loadRequest();\\r\\n\\r\\n$fields = $fi->request->prepare();\\r\\nreturn $fi->request->handle($fields);"}',
        'guid' => '56693e9706f70cff16f1a6ad6df9ce87',
        'native_key' => NULL,
        'signature' => 'b70ad17382bbc692e8e04b0d216e5fc8',
      ),
      '28c0855a1149407c622ee4383855d2d0' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItAutoResponder","description":"Custom hook for FormIt to handle Auto-Response emails.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt hook for auto-responders.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n$tpl = $modx->getOption(\'fiarTpl\',$scriptProperties,\'fiarTpl\');\\r\\n$mailFrom = $modx->getOption(\'fiarFrom\',$scriptProperties,$modx->getOption(\'emailsender\'));\\r\\n$mailFromName = $modx->getOption(\'fiarFromName\',$scriptProperties,$modx->getOption(\'site_name\'));\\r\\n$mailSender = $modx->getOption(\'fiarSender\',$scriptProperties,$modx->getOption(\'emailsender\'));\\r\\n$mailSubject = $modx->getOption(\'fiarSubject\',$scriptProperties,\'[[++site_name]] Auto-Responder\');\\r\\n$mailSubject = str_replace(array(\'[[++site_name]]\',\'[[++emailsender]]\'),array($modx->getOption(\'site_name\'),$modx->getOption(\'emailsender\')),$mailSubject);\\r\\n$fiarFiles = $modx->getOption(\'fiarFiles\',$scriptProperties,false);\\r\\n$isHtml = $modx->getOption(\'fiarHtml\',$scriptProperties,true);\\r\\n$toField = $modx->getOption(\'fiarToField\',$scriptProperties,\'email\');\\r\\n$multiSeparator = $modx->getOption(\'fiarMultiSeparator\',$formit->config,\\"\\\\n\\");\\r\\n$multiWrapper = $modx->getOption(\'fiarMultiWrapper\',$formit->config,\\"[[+value]]\\");\\r\\n$required = $modx->getOption(\'fiarRequired\',$scriptProperties,true);\\r\\nif (empty($fields[$toField])) {\\r\\n    if ($required) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] Auto-responder could not find field `\'.$toField.\'` in form submission.\');\\r\\n        return false;\\r\\n    } else {\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* handle checkbox and array fields *\\/\\r\\nforeach ($fields as $k => &$v) {\\r\\n    if (is_array($v) && !empty($v[\'name\']) && isset($v[\'error\']) && $v[\'error\'] == UPLOAD_ERR_OK) {\\r\\n        $fields[$k] = $v[\'name\'];\\r\\n    } else if (is_array($v)) {\\r\\n        $vOpts = array();\\r\\n        foreach ($v as $vKey => $vValue) {\\r\\n            if (is_string($vKey) && !empty($vKey)) {\\r\\n                $vKey = $k.\'.\'.$vKey;\\r\\n                $fields[$vKey] = $vValue;\\r\\n            } else {\\r\\n                $vOpts[] = str_replace(\'[[+value]]\',$vValue,$multiWrapper);\\r\\n            }\\r\\n        }\\r\\n        $newValue = implode($multiSeparator,$vOpts);\\r\\n        if (!empty($vOpts)) {\\r\\n            $fields[$k] = $newValue;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* setup placeholders *\\/\\r\\n$placeholders = $fields;\\r\\n$mailTo= $fields[$toField];\\r\\n\\r\\n$message = $formit->getChunk($tpl,$placeholders);\\r\\n$modx->parser->processElementTags(\'\',$message,true,false);\\r\\n\\r\\n$modx->getService(\'mail\', \'mail.modPHPMailer\');\\r\\n$modx->mail->reset();\\r\\n$modx->mail->set(modMail::MAIL_BODY,$message);\\r\\n$modx->mail->set(modMail::MAIL_FROM,$hook->_process($mailFrom,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_FROM_NAME,$hook->_process($mailFromName,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_SENDER,$hook->_process($mailSender,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_SUBJECT,$hook->_process($mailSubject,$placeholders));\\r\\n$modx->mail->address(\'to\',$mailTo);\\r\\n$modx->mail->setHTML($isHtml);\\r\\n\\r\\n\\/* add attachments *\\/\\r\\nif($fiarFiles){\\r\\n    $fiarFiles = explode(\',\', $fiarFiles);\\r\\n    foreach($fiarFiles AS $file){\\r\\n        $modx->mail->mailer->AddAttachment($file);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* reply to *\\/\\r\\n$emailReplyTo = $modx->getOption(\'fiarReplyTo\',$scriptProperties,$mailFrom);\\r\\n$emailReplyTo = $hook->_process($emailReplyTo,$fields);\\r\\n$emailReplyToName = $modx->getOption(\'fiarReplyToName\',$scriptProperties,$mailFromName);\\r\\n$emailReplyToName = $hook->_process($emailReplyToName,$fields);\\r\\nif (!empty($emailReplyTo)) {\\r\\n    $modx->mail->address(\'reply-to\',$emailReplyTo,$emailReplyToName);\\r\\n}\\r\\n\\r\\n\\/* cc *\\/\\r\\n$emailCC = $modx->getOption(\'fiarCC\',$scriptProperties,\'\');\\r\\nif (!empty($emailCC)) {\\r\\n    $emailCCName = $modx->getOption(\'fiarCCName\',$scriptProperties,\'\');\\r\\n    $emailCC = explode(\',\',$emailCC);\\r\\n    $emailCCName = explode(\',\',$emailCCName);\\r\\n    $numAddresses = count($emailCC);\\r\\n    for ($i=0;$i<$numAddresses;$i++) {\\r\\n        $etn = !empty($emailCCName[$i]) ? $emailCCName[$i] : \'\';\\r\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\r\\n        $emailCC[$i] = $hook->_process($emailCC[$i],$fields);\\r\\n        if (!empty($emailCC[$i])) {\\r\\n            $modx->mail->address(\'cc\',$emailCC[$i],$etn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* bcc *\\/\\r\\n$emailBCC = $modx->getOption(\'fiarBCC\',$scriptProperties,\'\');\\r\\nif (!empty($emailBCC)) {\\r\\n    $emailBCCName = $modx->getOption(\'fiarBCCName\',$scriptProperties,\'\');\\r\\n    $emailBCC = explode(\',\',$emailBCC);\\r\\n    $emailBCCName = explode(\',\',$emailBCCName);\\r\\n    $numAddresses = count($emailBCC);\\r\\n    for ($i=0;$i<$numAddresses;$i++) {\\r\\n        $etn = !empty($emailBCCName[$i]) ? $emailBCCName[$i] : \'\';\\r\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\r\\n        $emailBCC[$i] = $hook->_process($emailBCC[$i],$fields);\\r\\n        if (!empty($emailBCC[$i])) {\\r\\n            $modx->mail->address(\'bcc\',$emailBCC[$i],$etn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!$formit->inTestMode) {\\r\\n    if (!$modx->mail->send()) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] An error occurred while trying to send the auto-responder email: \'.$modx->mail->mailer->ErrorInfo);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n$modx->mail->reset();\\r\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt hook for auto-responders.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n$tpl = $modx->getOption(\'fiarTpl\',$scriptProperties,\'fiarTpl\');\\r\\n$mailFrom = $modx->getOption(\'fiarFrom\',$scriptProperties,$modx->getOption(\'emailsender\'));\\r\\n$mailFromName = $modx->getOption(\'fiarFromName\',$scriptProperties,$modx->getOption(\'site_name\'));\\r\\n$mailSender = $modx->getOption(\'fiarSender\',$scriptProperties,$modx->getOption(\'emailsender\'));\\r\\n$mailSubject = $modx->getOption(\'fiarSubject\',$scriptProperties,\'[[++site_name]] Auto-Responder\');\\r\\n$mailSubject = str_replace(array(\'[[++site_name]]\',\'[[++emailsender]]\'),array($modx->getOption(\'site_name\'),$modx->getOption(\'emailsender\')),$mailSubject);\\r\\n$fiarFiles = $modx->getOption(\'fiarFiles\',$scriptProperties,false);\\r\\n$isHtml = $modx->getOption(\'fiarHtml\',$scriptProperties,true);\\r\\n$toField = $modx->getOption(\'fiarToField\',$scriptProperties,\'email\');\\r\\n$multiSeparator = $modx->getOption(\'fiarMultiSeparator\',$formit->config,\\"\\\\n\\");\\r\\n$multiWrapper = $modx->getOption(\'fiarMultiWrapper\',$formit->config,\\"[[+value]]\\");\\r\\n$required = $modx->getOption(\'fiarRequired\',$scriptProperties,true);\\r\\nif (empty($fields[$toField])) {\\r\\n    if ($required) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] Auto-responder could not find field `\'.$toField.\'` in form submission.\');\\r\\n        return false;\\r\\n    } else {\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* handle checkbox and array fields *\\/\\r\\nforeach ($fields as $k => &$v) {\\r\\n    if (is_array($v) && !empty($v[\'name\']) && isset($v[\'error\']) && $v[\'error\'] == UPLOAD_ERR_OK) {\\r\\n        $fields[$k] = $v[\'name\'];\\r\\n    } else if (is_array($v)) {\\r\\n        $vOpts = array();\\r\\n        foreach ($v as $vKey => $vValue) {\\r\\n            if (is_string($vKey) && !empty($vKey)) {\\r\\n                $vKey = $k.\'.\'.$vKey;\\r\\n                $fields[$vKey] = $vValue;\\r\\n            } else {\\r\\n                $vOpts[] = str_replace(\'[[+value]]\',$vValue,$multiWrapper);\\r\\n            }\\r\\n        }\\r\\n        $newValue = implode($multiSeparator,$vOpts);\\r\\n        if (!empty($vOpts)) {\\r\\n            $fields[$k] = $newValue;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* setup placeholders *\\/\\r\\n$placeholders = $fields;\\r\\n$mailTo= $fields[$toField];\\r\\n\\r\\n$message = $formit->getChunk($tpl,$placeholders);\\r\\n$modx->parser->processElementTags(\'\',$message,true,false);\\r\\n\\r\\n$modx->getService(\'mail\', \'mail.modPHPMailer\');\\r\\n$modx->mail->reset();\\r\\n$modx->mail->set(modMail::MAIL_BODY,$message);\\r\\n$modx->mail->set(modMail::MAIL_FROM,$hook->_process($mailFrom,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_FROM_NAME,$hook->_process($mailFromName,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_SENDER,$hook->_process($mailSender,$placeholders));\\r\\n$modx->mail->set(modMail::MAIL_SUBJECT,$hook->_process($mailSubject,$placeholders));\\r\\n$modx->mail->address(\'to\',$mailTo);\\r\\n$modx->mail->setHTML($isHtml);\\r\\n\\r\\n\\/* add attachments *\\/\\r\\nif($fiarFiles){\\r\\n    $fiarFiles = explode(\',\', $fiarFiles);\\r\\n    foreach($fiarFiles AS $file){\\r\\n        $modx->mail->mailer->AddAttachment($file);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* reply to *\\/\\r\\n$emailReplyTo = $modx->getOption(\'fiarReplyTo\',$scriptProperties,$mailFrom);\\r\\n$emailReplyTo = $hook->_process($emailReplyTo,$fields);\\r\\n$emailReplyToName = $modx->getOption(\'fiarReplyToName\',$scriptProperties,$mailFromName);\\r\\n$emailReplyToName = $hook->_process($emailReplyToName,$fields);\\r\\nif (!empty($emailReplyTo)) {\\r\\n    $modx->mail->address(\'reply-to\',$emailReplyTo,$emailReplyToName);\\r\\n}\\r\\n\\r\\n\\/* cc *\\/\\r\\n$emailCC = $modx->getOption(\'fiarCC\',$scriptProperties,\'\');\\r\\nif (!empty($emailCC)) {\\r\\n    $emailCCName = $modx->getOption(\'fiarCCName\',$scriptProperties,\'\');\\r\\n    $emailCC = explode(\',\',$emailCC);\\r\\n    $emailCCName = explode(\',\',$emailCCName);\\r\\n    $numAddresses = count($emailCC);\\r\\n    for ($i=0;$i<$numAddresses;$i++) {\\r\\n        $etn = !empty($emailCCName[$i]) ? $emailCCName[$i] : \'\';\\r\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\r\\n        $emailCC[$i] = $hook->_process($emailCC[$i],$fields);\\r\\n        if (!empty($emailCC[$i])) {\\r\\n            $modx->mail->address(\'cc\',$emailCC[$i],$etn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* bcc *\\/\\r\\n$emailBCC = $modx->getOption(\'fiarBCC\',$scriptProperties,\'\');\\r\\nif (!empty($emailBCC)) {\\r\\n    $emailBCCName = $modx->getOption(\'fiarBCCName\',$scriptProperties,\'\');\\r\\n    $emailBCC = explode(\',\',$emailBCC);\\r\\n    $emailBCCName = explode(\',\',$emailBCCName);\\r\\n    $numAddresses = count($emailBCC);\\r\\n    for ($i=0;$i<$numAddresses;$i++) {\\r\\n        $etn = !empty($emailBCCName[$i]) ? $emailBCCName[$i] : \'\';\\r\\n        if (!empty($etn)) $etn = $hook->_process($etn,$fields);\\r\\n        $emailBCC[$i] = $hook->_process($emailBCC[$i],$fields);\\r\\n        if (!empty($emailBCC[$i])) {\\r\\n            $modx->mail->address(\'bcc\',$emailBCC[$i],$etn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!$formit->inTestMode) {\\r\\n    if (!$modx->mail->send()) {\\r\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[FormIt] An error occurred while trying to send the auto-responder email: \'.$modx->mail->mailer->ErrorInfo);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n$modx->mail->reset();\\r\\nreturn true;"}',
        'guid' => '4f22e3f1e8f7ba3edc36b97106a50887',
        'native_key' => NULL,
        'signature' => '9f0462b2bcdda490eb68a8f9a579a733',
      ),
      '78ac0c06ad3db784a0f55c9d83fa552d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItRetriever","description":"Fetches a form submission for a user for displaying on a thank you page.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItRetriever\\r\\n *\\r\\n * Retrieves a prior form submission that was stored with the &store property\\r\\n * in a FormIt call.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/* setup properties *\\/\\r\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'fi.\');\\r\\n$eraseOnLoad = $modx->getOption(\'eraseOnLoad\',$scriptProperties,false);\\r\\n$redirectToOnNotFound = $modx->getOption(\'redirectToOnNotFound\',$scriptProperties,false);\\r\\n\\r\\n\\/* fetch data from cache and set to placeholders *\\/\\r\\n$fi->loadRequest();\\r\\n$fi->request->loadDictionary();\\r\\n$data = $fi->request->dictionary->retrieve();\\r\\nif (!empty($data)) {\\r\\n    \\/* set data to placeholders *\\/\\r\\n    foreach ($data as $k=>$v) {\\r\\n        \\/*checkboxes & other multi-values are stored as arrays, must be imploded*\\/\\r\\n        if (is_array($v)) {\\r\\n            $data[$k] = implode(\',\',$v);\\r\\n        }\\r\\n    }\\r\\n    $modx->toPlaceholders($data,$placeholderPrefix,\'\');\\r\\n    \\r\\n    \\/* if set, erase the data on load, otherwise depend on cache expiry time *\\/\\r\\n    if ($eraseOnLoad) {\\r\\n        $fi->request->dictionary->erase();\\r\\n    }\\r\\n\\/* if the data\'s not found, and we want to redirect somewhere if so, do here *\\/\\r\\n} else if (!empty($redirectToOnNotFound)) {\\r\\n    $url = $modx->makeUrl($redirectToOnNotFound);\\r\\n    $modx->sendRedirect($url);\\r\\n}\\r\\nreturn \'\';","locked":0,"properties":"a:4:{s:17:\\"placeholderPrefix\\";a:7:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:31:\\"prop_fir.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"fi.\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"redirectToOnNotFound\\";a:7:{s:4:\\"name\\";s:20:\\"redirectToOnNotFound\\";s:4:\\"desc\\";s:34:\\"prop_fir.redirecttoonnotfound_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"eraseOnLoad\\";a:7:{s:4:\\"name\\";s:11:\\"eraseOnLoad\\";s:4:\\"desc\\";s:25:\\"prop_fir.eraseonload_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"storeLocation\\";a:7:{s:4:\\"name\\";s:13:\\"storeLocation\\";s:4:\\"desc\\";s:27:\\"prop_fir.storelocation_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:5:\\"value\\";s:5:\\"cache\\";s:4:\\"text\\";s:16:\\"formit.opt_cache\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"session\\";s:4:\\"text\\";s:18:\\"formit.opt_session\\";}}s:5:\\"value\\";s:5:\\"cache\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItRetriever\\r\\n *\\r\\n * Retrieves a prior form submission that was stored with the &store property\\r\\n * in a FormIt call.\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/* setup properties *\\/\\r\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'fi.\');\\r\\n$eraseOnLoad = $modx->getOption(\'eraseOnLoad\',$scriptProperties,false);\\r\\n$redirectToOnNotFound = $modx->getOption(\'redirectToOnNotFound\',$scriptProperties,false);\\r\\n\\r\\n\\/* fetch data from cache and set to placeholders *\\/\\r\\n$fi->loadRequest();\\r\\n$fi->request->loadDictionary();\\r\\n$data = $fi->request->dictionary->retrieve();\\r\\nif (!empty($data)) {\\r\\n    \\/* set data to placeholders *\\/\\r\\n    foreach ($data as $k=>$v) {\\r\\n        \\/*checkboxes & other multi-values are stored as arrays, must be imploded*\\/\\r\\n        if (is_array($v)) {\\r\\n            $data[$k] = implode(\',\',$v);\\r\\n        }\\r\\n    }\\r\\n    $modx->toPlaceholders($data,$placeholderPrefix,\'\');\\r\\n    \\r\\n    \\/* if set, erase the data on load, otherwise depend on cache expiry time *\\/\\r\\n    if ($eraseOnLoad) {\\r\\n        $fi->request->dictionary->erase();\\r\\n    }\\r\\n\\/* if the data\'s not found, and we want to redirect somewhere if so, do here *\\/\\r\\n} else if (!empty($redirectToOnNotFound)) {\\r\\n    $url = $modx->makeUrl($redirectToOnNotFound);\\r\\n    $modx->sendRedirect($url);\\r\\n}\\r\\nreturn \'\';"}',
        'guid' => '24a922c6155699c0b310488f98e3df8f',
        'native_key' => NULL,
        'signature' => '74ee4a7d6d24436dcc20281ff78568d7',
      ),
      '04b41cea4510654895c3724dd7ad6745' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItIsChecked","description":"A custom output filter used with checkboxes\\/radios for checking checked status.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItIsChecked\\r\\n *\\r\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\r\\n *\\r\\n * @var string $input\\r\\n * @var string $options\\r\\n * @var modX $modx\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n$output = \' \';\\r\\nif ($input == $options) {\\r\\n    $output = \' checked=\\"checked\\"\';\\r\\n}\\r\\n$input = $modx->fromJSON($input);\\r\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\r\\n  $output = \' checked=\\"checked\\"\';\\r\\n}\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItIsChecked\\r\\n *\\r\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\r\\n *\\r\\n * @var string $input\\r\\n * @var string $options\\r\\n * @var modX $modx\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n$output = \' \';\\r\\nif ($input == $options) {\\r\\n    $output = \' checked=\\"checked\\"\';\\r\\n}\\r\\n$input = $modx->fromJSON($input);\\r\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\r\\n  $output = \' checked=\\"checked\\"\';\\r\\n}\\r\\nreturn $output;"}',
        'guid' => '48bcc0b83eeb2f567dc88e493ba90d6d',
        'native_key' => NULL,
        'signature' => '4f50ac0ea065fc8cda65ef5dd294236c',
      ),
      'ef49d2d6bef9e29037957d23a68e8484' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItIsSelected","description":"A custom output filter used with dropdowns for checking selected status.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItIsChecked\\r\\n *\\r\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\r\\n *\\r\\n * @var string $input\\r\\n * @var string $options\\r\\n * @var modX $modx\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n$output = \' \';\\r\\nif ($input == $options) {\\r\\n    $output = \' selected=\\"selected\\"\';\\r\\n}\\r\\n$input = $modx->fromJSON($input);\\r\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\r\\n  $output = \' selected=\\"selected\\"\';\\r\\n}\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItIsChecked\\r\\n *\\r\\n * Custom output filter that returns checked=\\"checked\\" if the value is set\\r\\n *\\r\\n * @var string $input\\r\\n * @var string $options\\r\\n * @var modX $modx\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n$output = \' \';\\r\\nif ($input == $options) {\\r\\n    $output = \' selected=\\"selected\\"\';\\r\\n}\\r\\n$input = $modx->fromJSON($input);\\r\\nif (!empty($input) && is_array($input) && in_array($options,$input)) {\\r\\n  $output = \' selected=\\"selected\\"\';\\r\\n}\\r\\nreturn $output;"}',
        'guid' => 'b94c3cf0d80fd81af4768ac203e46829',
        'native_key' => NULL,
        'signature' => '19d725febecab1792452db82811218e4',
      ),
      '24138ddd088f4e2cb7b206ace073fe32' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItCountryOptions","description":"A utility snippet for generating a dropdown list of countries.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItCountryOptions\\r\\n *\\r\\n * Automatically generates and outputs a country list for usage in forms\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/** @var fiCountryOptions $co *\\/\\r\\n$co = $fi->loadModule(\'fiCountryOptions\',\'countryOptions\',$scriptProperties);\\r\\n$co->initialize();\\r\\n$co->getData();\\r\\n$co->loadPrioritized();\\r\\n$co->iterate();\\r\\nreturn $co->output();","locked":0,"properties":"a:10:{s:8:\\"selected\\";a:7:{s:4:\\"name\\";s:8:\\"selected\\";s:4:\\"desc\\";s:23:\\"prop_fico.selected_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:18:\\"prop_fico.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"option\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"useIsoCode\\";a:7:{s:4:\\"name\\";s:10:\\"useIsoCode\\";s:4:\\"desc\\";s:25:\\"prop_fico.useisocode_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"prioritized\\";a:7:{s:4:\\"name\\";s:11:\\"prioritized\\";s:4:\\"desc\\";s:26:\\"prop_fico.prioritized_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"optGroupTpl\\";a:7:{s:4:\\"name\\";s:11:\\"optGroupTpl\\";s:4:\\"desc\\";s:26:\\"prop_fico.optgrouptpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"optgroup\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:20:\\"prioritizedGroupText\\";a:7:{s:4:\\"name\\";s:20:\\"prioritizedGroupText\\";s:4:\\"desc\\";s:35:\\"prop_fico.prioritizedgrouptext_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"allGroupText\\";a:7:{s:4:\\"name\\";s:12:\\"allGroupText\\";s:4:\\"desc\\";s:27:\\"prop_fico.allgrouptext_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"selectedAttribute\\";a:7:{s:4:\\"name\\";s:17:\\"selectedAttribute\\";s:4:\\"desc\\";s:32:\\"prop_fico.selectedattribute_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\" selected=\\"selected\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:28:\\"prop_fico.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"country\\";a:7:{s:4:\\"name\\";s:7:\\"country\\";s:4:\\"desc\\";s:22:\\"prop_fico.country_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:16:\\"[[++cultureKey]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItCountryOptions\\r\\n *\\r\\n * Automatically generates and outputs a country list for usage in forms\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/** @var fiCountryOptions $co *\\/\\r\\n$co = $fi->loadModule(\'fiCountryOptions\',\'countryOptions\',$scriptProperties);\\r\\n$co->initialize();\\r\\n$co->getData();\\r\\n$co->loadPrioritized();\\r\\n$co->iterate();\\r\\nreturn $co->output();"}',
        'guid' => '0f983ab913b641fe0d06f8c08234e49d',
        'native_key' => NULL,
        'signature' => 'af2e96024500d0b7e55f699125cd7a4a',
      ),
      '8028ab34b9cb68653d9f186632f6b252' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItStateOptions","description":"A utility snippet for generating a dropdown list of U.S. states.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItStateOptions\\r\\n *\\r\\n * Automatically generates and outputs a U.S. state list for usage in forms\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/** @var fiStateOptions $so *\\/\\r\\n$so = $fi->loadModule(\'fiStateOptions\',\'stateOptions\',$scriptProperties);\\r\\n$so->initialize();\\r\\n$so->getData();\\r\\n$so->iterate();\\r\\nreturn $so->output();","locked":0,"properties":"a:6:{s:8:\\"selected\\";a:7:{s:4:\\"name\\";s:8:\\"selected\\";s:4:\\"desc\\";s:23:\\"prop_fiso.selected_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:18:\\"prop_fiso.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"option\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"useAbbr\\";a:7:{s:4:\\"name\\";s:7:\\"useAbbr\\";s:4:\\"desc\\";s:22:\\"prop_fiso.useabbr_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"selectedAttribute\\";a:7:{s:4:\\"name\\";s:17:\\"selectedAttribute\\";s:4:\\"desc\\";s:32:\\"prop_fiso.selectedattribute_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\" selected=\\"selected\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:28:\\"prop_fiso.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"country\\";a:7:{s:4:\\"name\\";s:7:\\"country\\";s:4:\\"desc\\";s:22:\\"prop_fiso.country_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:16:\\"[[++cultureKey]]\\";s:7:\\"lexicon\\";s:17:\\"formit:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2009-2012 by Shaun McCormick <shaun@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * FormItStateOptions\\r\\n *\\r\\n * Automatically generates and outputs a U.S. state list for usage in forms\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\r\\n$modelPath = $modx->getOption(\'formit.core_path\', null, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/formit\\/\') . \'model\\/formit\\/\';\\r\\n$modx->loadClass(\'FormIt\', $modelPath, true, true);\\r\\n\\r\\n$fi = new FormIt($modx,$scriptProperties);\\r\\n\\r\\n\\/** @var fiStateOptions $so *\\/\\r\\n$so = $fi->loadModule(\'fiStateOptions\',\'stateOptions\',$scriptProperties);\\r\\n$so->initialize();\\r\\n$so->getData();\\r\\n$so->iterate();\\r\\nreturn $so->output();"}',
        'guid' => '6c133165eb697ff83fda64ea1288b33c',
        'native_key' => NULL,
        'signature' => '9fc2ae259dfb7e87daaf42767168ec8f',
      ),
      'a9926b8d17b4db46bfb97eca47146b54' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItSaveForm","description":"Custom hook for FormIt to save the form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\r\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt hook for saving filled-in forms. - Based on FormSave\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n$values = $hook->getValues();\\r\\n$formName = $modx->getOption(\'formName\', $formit->config, \'form-\'.$modx->resource->get(\'id\'));\\r\\n\\/\\/ process formName. Pick a value from the form\\r\\n\\/\\/ Inspired from the email\'s hook of formit (fihooks.class.php)\\r\\nif (is_string($formName)) {\\r\\n    foreach ($fields as $k => $v) {\\r\\n        if (is_scalar($k) && is_scalar($v)) {\\r\\n            $formName = str_replace(\'[[+\'.$k.\']]\',$v,$formName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\r\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\r\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\r\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\r\\n\\/\\/ In order to use update process, you need to provide the hash key to the user somehow\\r\\n\\/\\/ Usually with [[!FormItRetriever]] to populate this form field:\\r\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\r\\n\\/\\/ Disable if you want to use the session_id() in your hash, like FormIt does\\r\\n\\/\\/ WARNING: this can cause potential hash key collisions and overwriting of the wrong form record!!\\r\\n$formHashKeyRandom = $modx->getOption(\'formHashKeyRandom\', $formit->config, true);\\r\\n\\/\\/ process formHashKeyField into variable for later use\\r\\n$formHashKey = (isset($values[$formHashKeyField])) ? (string) $values[$formHashKeyField] : \'\';\\r\\n\\/\\/ our hashing methods return 32 chars\\r\\nif (strlen($formHashKey) !== 32) $formHashKey = \'\';\\r\\nunset($values[$formHashKeyField]);\\r\\n\\r\\nif ($formFields) {\\r\\n    $formFields = explode(\',\', $formFields);\\r\\n    foreach($formFields as $k => $v) {\\r\\n        $formFields[$k] = trim($v);\\r\\n    }\\r\\n}\\r\\n\\/\\/ Build the data array\\r\\n$dataArray = array();\\r\\nif($formFields){\\r\\n    foreach($formFields as $field) {\\r\\n        $dataArray[$field] = (!isset($values[$field])) ? \'\' : $values[$field];\\r\\n    }\\r\\n}else{\\r\\n    $dataArray = $values;\\r\\n}\\r\\n\\/\\/Change the fieldnames\\r\\nif($fieldNames){\\r\\n    $newDataArray = array();\\r\\n    $fieldLabels = array();\\r\\n    $formFieldNames = explode(\',\', $fieldNames);\\r\\n    foreach($formFieldNames as $formFieldName){\\r\\n        list($name, $label) = explode(\'==\', $formFieldName);\\r\\n        $fieldLabels[trim($name)] = trim($label);\\r\\n    }\\r\\n    foreach ($dataArray as $key => $value) {\\r\\n        if($fieldLabels[$key]){\\r\\n            $newDataArray[$fieldLabels[$key]] = $value;\\r\\n        }else{\\r\\n            $newDataArray[$key] = $value;\\r\\n        }\\r\\n    }\\r\\n    $dataArray = $newDataArray;\\r\\n}\\r\\n\\/\\/ We only enter update mode if we already have a valid formHashKey (tested above)\\r\\n\\/\\/ AND the updateSavedForm param was set to a truth-y value.\\r\\n$mode = ($updateSavedForm && $formHashKey) ? \'update\' : \'create\';\\r\\n\\/\\/ Create\\/get obj\\r\\n$newForm = null;\\r\\nif ($mode === \'update\') {\\r\\n    $newForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\r\\n}\\r\\nif ($newForm === null) $newForm = $modx->newObject(\'FormItForm\');\\r\\n\\r\\n\\/\\/ Handle encryption\\r\\nif($formEncrypt){\\r\\n    $dataArray = $newForm->encrypt($modx->toJSON($dataArray));\\r\\n}else{\\r\\n    $dataArray = $modx->toJSON($dataArray);\\r\\n}\\r\\n\\r\\n\\/\\/ Create new hash key on create mode, and handle invalid hash keys. \\r\\nif ($mode === \'create\') {\\r\\n    $formHashKey = ($formHashKeyRandom) ? $newForm->generatePseudoRandomHash() : pathinfo($formit->getStoreKey(), PATHINFO_BASENAME);\\r\\n}\\r\\n\\r\\n\\/\\/ Array from which to populate form record\\r\\n$newFormArray = array();\\r\\n\\r\\n\\/\\/ Special case: if updateSavedForm has the flag \'values\' we only merge in\\r\\n\\/\\/ the form values, not the other stuff\\r\\nif ($mode === \'update\' && $updateSavedForm === \'values\') {\\r\\n    $newFormArray = $newForm->toArray();\\r\\n    $newFormArray = array_merge($newFormArray, array(\\r\\n        \'values\' => $dataArray,\\r\\n    ));       \\r\\n} else {\\r\\n    \\/\\/ In all other cases, we overwrite the record completely!\\r\\n    \\/\\/ In create mode we must save the hash. In update mode, the \\r\\n    \\/\\/ formHashKey will be valid so we can also save it, again.\\r\\n    $newFormArray = array(\\r\\n        \'form\' => $formName,\\r\\n        \'date\' => time(),\\r\\n        \'values\' => $dataArray,\\r\\n        \'ip\' => $modx->getOption(\'REMOTE_ADDR\', $_SERVER, \'\'),\\r\\n        \'context_key\' => $modx->resource->get(\'context_key\'),\\r\\n        \'encrypted\' => $formEncrypt,\\r\\n        \'hash\' => $formHashKey,\\r\\n    );\\r\\n}\\r\\n\\/\\/ Convert to object\\r\\n$newForm->fromArray($newFormArray);\\r\\n\\/\\/ Attempt to save\\r\\nif (!$newForm->save()) {\\r\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[FormItSaveForm] An error occurred while trying to save the submitted form: \' . print_r($newForm->toArray(), true));\\r\\n    return false;\\r\\n}\\r\\n\\/\\/ Pass the hash and form data back to the user\\r\\n$hook->setValue(\'savedForm\', $newForm->toArray());\\r\\n$hook->setValue($formHashKeyField, $newForm->get(\'hash\'));\\r\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\r\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt hook for saving filled-in forms. - Based on FormSave\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n$values = $hook->getValues();\\r\\n$formName = $modx->getOption(\'formName\', $formit->config, \'form-\'.$modx->resource->get(\'id\'));\\r\\n\\/\\/ process formName. Pick a value from the form\\r\\n\\/\\/ Inspired from the email\'s hook of formit (fihooks.class.php)\\r\\nif (is_string($formName)) {\\r\\n    foreach ($fields as $k => $v) {\\r\\n        if (is_scalar($k) && is_scalar($v)) {\\r\\n            $formName = str_replace(\'[[+\'.$k.\']]\',$v,$formName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\r\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\r\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\r\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\r\\n\\/\\/ In order to use update process, you need to provide the hash key to the user somehow\\r\\n\\/\\/ Usually with [[!FormItRetriever]] to populate this form field:\\r\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\r\\n\\/\\/ Disable if you want to use the session_id() in your hash, like FormIt does\\r\\n\\/\\/ WARNING: this can cause potential hash key collisions and overwriting of the wrong form record!!\\r\\n$formHashKeyRandom = $modx->getOption(\'formHashKeyRandom\', $formit->config, true);\\r\\n\\/\\/ process formHashKeyField into variable for later use\\r\\n$formHashKey = (isset($values[$formHashKeyField])) ? (string) $values[$formHashKeyField] : \'\';\\r\\n\\/\\/ our hashing methods return 32 chars\\r\\nif (strlen($formHashKey) !== 32) $formHashKey = \'\';\\r\\nunset($values[$formHashKeyField]);\\r\\n\\r\\nif ($formFields) {\\r\\n    $formFields = explode(\',\', $formFields);\\r\\n    foreach($formFields as $k => $v) {\\r\\n        $formFields[$k] = trim($v);\\r\\n    }\\r\\n}\\r\\n\\/\\/ Build the data array\\r\\n$dataArray = array();\\r\\nif($formFields){\\r\\n    foreach($formFields as $field) {\\r\\n        $dataArray[$field] = (!isset($values[$field])) ? \'\' : $values[$field];\\r\\n    }\\r\\n}else{\\r\\n    $dataArray = $values;\\r\\n}\\r\\n\\/\\/Change the fieldnames\\r\\nif($fieldNames){\\r\\n    $newDataArray = array();\\r\\n    $fieldLabels = array();\\r\\n    $formFieldNames = explode(\',\', $fieldNames);\\r\\n    foreach($formFieldNames as $formFieldName){\\r\\n        list($name, $label) = explode(\'==\', $formFieldName);\\r\\n        $fieldLabels[trim($name)] = trim($label);\\r\\n    }\\r\\n    foreach ($dataArray as $key => $value) {\\r\\n        if($fieldLabels[$key]){\\r\\n            $newDataArray[$fieldLabels[$key]] = $value;\\r\\n        }else{\\r\\n            $newDataArray[$key] = $value;\\r\\n        }\\r\\n    }\\r\\n    $dataArray = $newDataArray;\\r\\n}\\r\\n\\/\\/ We only enter update mode if we already have a valid formHashKey (tested above)\\r\\n\\/\\/ AND the updateSavedForm param was set to a truth-y value.\\r\\n$mode = ($updateSavedForm && $formHashKey) ? \'update\' : \'create\';\\r\\n\\/\\/ Create\\/get obj\\r\\n$newForm = null;\\r\\nif ($mode === \'update\') {\\r\\n    $newForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\r\\n}\\r\\nif ($newForm === null) $newForm = $modx->newObject(\'FormItForm\');\\r\\n\\r\\n\\/\\/ Handle encryption\\r\\nif($formEncrypt){\\r\\n    $dataArray = $newForm->encrypt($modx->toJSON($dataArray));\\r\\n}else{\\r\\n    $dataArray = $modx->toJSON($dataArray);\\r\\n}\\r\\n\\r\\n\\/\\/ Create new hash key on create mode, and handle invalid hash keys. \\r\\nif ($mode === \'create\') {\\r\\n    $formHashKey = ($formHashKeyRandom) ? $newForm->generatePseudoRandomHash() : pathinfo($formit->getStoreKey(), PATHINFO_BASENAME);\\r\\n}\\r\\n\\r\\n\\/\\/ Array from which to populate form record\\r\\n$newFormArray = array();\\r\\n\\r\\n\\/\\/ Special case: if updateSavedForm has the flag \'values\' we only merge in\\r\\n\\/\\/ the form values, not the other stuff\\r\\nif ($mode === \'update\' && $updateSavedForm === \'values\') {\\r\\n    $newFormArray = $newForm->toArray();\\r\\n    $newFormArray = array_merge($newFormArray, array(\\r\\n        \'values\' => $dataArray,\\r\\n    ));       \\r\\n} else {\\r\\n    \\/\\/ In all other cases, we overwrite the record completely!\\r\\n    \\/\\/ In create mode we must save the hash. In update mode, the \\r\\n    \\/\\/ formHashKey will be valid so we can also save it, again.\\r\\n    $newFormArray = array(\\r\\n        \'form\' => $formName,\\r\\n        \'date\' => time(),\\r\\n        \'values\' => $dataArray,\\r\\n        \'ip\' => $modx->getOption(\'REMOTE_ADDR\', $_SERVER, \'\'),\\r\\n        \'context_key\' => $modx->resource->get(\'context_key\'),\\r\\n        \'encrypted\' => $formEncrypt,\\r\\n        \'hash\' => $formHashKey,\\r\\n    );\\r\\n}\\r\\n\\/\\/ Convert to object\\r\\n$newForm->fromArray($newFormArray);\\r\\n\\/\\/ Attempt to save\\r\\nif (!$newForm->save()) {\\r\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[FormItSaveForm] An error occurred while trying to save the submitted form: \' . print_r($newForm->toArray(), true));\\r\\n    return false;\\r\\n}\\r\\n\\/\\/ Pass the hash and form data back to the user\\r\\n$hook->setValue(\'savedForm\', $newForm->toArray());\\r\\n$hook->setValue($formHashKeyField, $newForm->get(\'hash\'));\\r\\nreturn true;"}',
        'guid' => 'dbf507b556ed53427a6901a49be39b74',
        'native_key' => NULL,
        'signature' => '40f3534f5f00b901b69e9575385a7f1d',
      ),
      '8362a7f83e7e05248a0c41c7a67af59a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FormItLoadSavedForm","description":"Prehook to load previously saved form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\r\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\r\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n\\/\\/ If prehook fails do we continue?\\r\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\r\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\r\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\r\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\r\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\r\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\r\\nif (!$updateSavedForm) return $return;\\r\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\r\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\r\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\r\\n$formHashKey = \'\';\\r\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\r\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\r\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\r\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\r\\nif (strlen($formHashKey) !== 32) return $return;\\r\\n\\r\\n\\/\\/ Try to fetch the saved form\\r\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\r\\nif (!$savedForm) return $return;\\r\\n\\r\\nif ($formFields) {\\r\\n    $formFields = explode(\',\', $formFields);\\r\\n    foreach($formFields as $k => $v) {\\r\\n        $formFields[$k] = trim($v);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ Initialize the data array\\r\\n\\/\\/ Handle encryption\\r\\nif ($formEncrypt) {\\r\\n    $data = $savedForm->decrypt();\\r\\n} else {\\r\\n    $data = $savedForm->get(\'values\');\\r\\n}\\r\\nif (is_string($data)) $data = $modx->fromJSON($data);\\r\\nif (!is_array($data)) return $return;\\r\\n\\r\\n\\/\\/Change the fieldnames\\r\\nif ($fieldNames) {\\r\\n    $newDataArray = array();\\r\\n    $fieldLabels = array();\\r\\n    $formFieldNames = explode(\',\', $fieldNames);\\r\\n    foreach($formFieldNames as $formFieldName){\\r\\n        list($name, $label) = explode(\'==\', $formFieldName);\\r\\n        \\/\\/ reverse order from FormItSaveForm snippet\\r\\n        $fieldLabels[trim($label)] = trim($name);\\r\\n    }\\r\\n    foreach ($data as $key => $value) {\\r\\n        if ($fieldLabels[$key]) {\\r\\n            $newDataArray[$fieldLabels[$key]] = $value;\\r\\n        }else{\\r\\n            $newDataArray[$key] = $value;\\r\\n        }\\r\\n    }\\r\\n    $data = $newDataArray;\\r\\n}\\r\\n\\r\\n\\/\\/ Always pass back in the provided hash key\\r\\n$data[$formHashKeyField] = $formHashKey;\\r\\n$hook->setValues($data);\\r\\nreturn true;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FormIt\\r\\n *\\r\\n * Copyright 2011-12 by SCHERP Ontwikkeling <info@scherpontwikkeling.nl>\\r\\n * Copyright 2015 by Wieger Sloot <modx@sterc.nl>\\r\\n * Copyright 2016 by YJ Tso <yj@modx.com>\\r\\n *\\r\\n * FormIt is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * FormIt is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package formit\\r\\n *\\/\\r\\n\\/**\\r\\n * A custom FormIt prehook for fetching saved form data. - Based on FormItSaveForm\\r\\n *\\r\\n * @var modX $modx\\r\\n * @var array $scriptProperties\\r\\n * @var FormIt $formit\\r\\n * @var fiHooks $hook\\r\\n * \\r\\n * @package formit\\r\\n *\\/\\r\\n\\/* setup default properties *\\/\\r\\n\\/\\/ If prehook fails do we continue?\\r\\n$return = $modx->getOption(\'returnValueOnFail\', $formit->config, true);\\r\\n$formEncrypt = $modx->getOption(\'formEncrypt\', $formit->config, false);\\r\\n$formFields = $modx->getOption(\'formFields\', $formit->config, false);\\r\\n$fieldNames = $modx->getOption(\'fieldNames\', $formit->config, false);\\r\\n$updateSavedForm = $modx->getOption(\'updateSavedForm\', $formit->config, false); \\/\\/ true, false, \'1\', \'0\', or \'values\'\\r\\n\\/\\/ If FormIt config says don\'t update, don\'t do it\\r\\nif (!$updateSavedForm) return $return;\\r\\n\\/\\/ In order to load form values, the user must provide the hash key somehow\\r\\n\\/\\/ Usually with a $_GET parameter, but a property in $formit->config will override.\\r\\n$formHashKeyField = $modx->getOption(\'savedFormHashKeyField\', $formit->config, \'savedFormHashKey\');\\r\\n$formHashKey = \'\';\\r\\nif (isset($_GET[$formHashKeyField])) $formHashKey = (string) $_GET[$formHashKeyField];\\r\\nif ($hook->getValue($formHashKeyField)) $formHashKey = (string) $hook->getValue($formHashKeyField);\\r\\nif (isset($formit->config[$formHashKeyField])) $formHashKey = $formit->config[$formHashKeyField];\\r\\n\\/\\/ our hashing methods return 32 chars. if no valid hash key we\'re done here.\\r\\nif (strlen($formHashKey) !== 32) return $return;\\r\\n\\r\\n\\/\\/ Try to fetch the saved form\\r\\n$savedForm = $modx->getObject(\'FormItForm\', array(\'hash\' => $formHashKey));\\r\\nif (!$savedForm) return $return;\\r\\n\\r\\nif ($formFields) {\\r\\n    $formFields = explode(\',\', $formFields);\\r\\n    foreach($formFields as $k => $v) {\\r\\n        $formFields[$k] = trim($v);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ Initialize the data array\\r\\n\\/\\/ Handle encryption\\r\\nif ($formEncrypt) {\\r\\n    $data = $savedForm->decrypt();\\r\\n} else {\\r\\n    $data = $savedForm->get(\'values\');\\r\\n}\\r\\nif (is_string($data)) $data = $modx->fromJSON($data);\\r\\nif (!is_array($data)) return $return;\\r\\n\\r\\n\\/\\/Change the fieldnames\\r\\nif ($fieldNames) {\\r\\n    $newDataArray = array();\\r\\n    $fieldLabels = array();\\r\\n    $formFieldNames = explode(\',\', $fieldNames);\\r\\n    foreach($formFieldNames as $formFieldName){\\r\\n        list($name, $label) = explode(\'==\', $formFieldName);\\r\\n        \\/\\/ reverse order from FormItSaveForm snippet\\r\\n        $fieldLabels[trim($label)] = trim($name);\\r\\n    }\\r\\n    foreach ($data as $key => $value) {\\r\\n        if ($fieldLabels[$key]) {\\r\\n            $newDataArray[$fieldLabels[$key]] = $value;\\r\\n        }else{\\r\\n            $newDataArray[$key] = $value;\\r\\n        }\\r\\n    }\\r\\n    $data = $newDataArray;\\r\\n}\\r\\n\\r\\n\\/\\/ Always pass back in the provided hash key\\r\\n$data[$formHashKeyField] = $formHashKey;\\r\\n$hook->setValues($data);\\r\\nreturn true;"}',
        'guid' => '57db3a68570e3398f656364b2dcbdc4d',
        'native_key' => NULL,
        'signature' => '24c7cefc4f2fb59d6eb411c625b2fcf5',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'parent',
        1 => 'category',
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'formit',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit-2.2.11-pl\\/modCategory\\/01869e56af4f20198634a51942004b3f\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"formit"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit-2.2.11-pl\\/modCategory\\/01869e56af4f20198634a51942004b3f\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"formit"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-2.2.11-pl\\/modCategory\\/01869e56af4f20198634a51942004b3f.gpm.resolve.tables.resolver","type":"php","name":"gpm.resolve.tables"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"formit-2.2.11-pl\\/modCategory\\/01869e56af4f20198634a51942004b3f.resolve.tables.resolver","type":"php","name":"resolve.tables"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'd39bd27e52fc742d29017e48987de7e3',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '01869e56af4f20198634a51942004b3f',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"FormIt","rank":0}',
);